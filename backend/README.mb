# ALOHA Node Manager (Backend)

The Node Manager serves as the backend controller of the ALOHA robotic system. It is implemented in Python using ROS 2 and is responsible for executing the robot's core operational routines through services and subprocesses. It acts as the central coordination unit that responds to service calls from the user interfaces.

---

## Overview of Responsibilities

- Launch the robot's bringup stack
- Run the sleep mode behavior
- Start automated task recordings with specified task name and number of episodes
- Subscribe to camera image topics for monitoring or processing
- Ensure that subprocesses do not run concurrently by terminating previous ones

---

## System Workflow

This diagram illustrates how the Node Manager fits into the system:

![Overall System Architecture](images/Overall_Work_Flow_Architecture.png)

---

## Internal Logic Flow

The diagram below explains how the services manage subprocess execution:

![Backend Flow Diagram](images/backend%20flow.png)

Each service triggers an associated command:
- **Launch Service**: Starts the bringup sequence using `ros2 launch`
- **Sleep Service**: Executes a sleep mode script via Python
- **Auto Record Service**: Runs a bash script with a task name and episode count

All previously running processes are terminated before a new command is issued.

---

## File Location

```
backend/
└── node_manager.py
```

---

## ROS Services

The Node Manager exposes the following ROS 2 services:

| Service Name       | Service Type | Function                                        |
|--------------------|---------------|-------------------------------------------------|
| `launch_ros2`      | Trigger       | Launches the full robot bringup sequence        |
| `run_sleep`        | Trigger       | Starts the robot's sleep behavior               |
| `run_auto_record`  | AutoRecord    | Records a task with specified parameters        |

---

## Subscribed Camera Topics

The node also subscribes to raw image topics from four cameras:
- `/cam_high/camera/color/image_rect_raw`
- `/cam_left_wrist/camera/color/image_rect_raw`
- `/cam_low/camera/color/image_rect_raw`
- `/cam_right_wrist/camera/color/image_rect_raw`

These subscriptions allow image handling or diagnostics during runtime.

---

## Requirements

- ROS 2 (Foxy or Humble)
- Python 3.8 or higher
- ROS 2 packages:
  - `rclpy`
  - `std_srvs`
  - `sensor_msgs`
  - `aloha_msgs` (custom service type)

---

## How to Run

Ensure that ROS 2 is sourced and the required workspace is built. Then, launch the Node Manager with:

```bash
source ~/ros2_ws/install/setup.bash
ros2 run backend node_manager
```

Ensure that required scripts like `auto_record.sh` and `sleep.py` exist at the paths specified inside the script.

---

## Notes

- Each subprocess is managed using Python’s `subprocess.Popen`
- If a new command is triggered, any existing subprocess is terminated to prevent conflict
- Validations (like task name checking) are built into the auto record service
